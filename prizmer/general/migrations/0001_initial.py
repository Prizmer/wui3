# Generated by Django 3.0.8 on 2020-07-13 09:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Abonents',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('account_1', models.CharField(max_length=16)),
                ('account_2', models.CharField(blank=True, max_length=16)),
                ('flat_number', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'verbose_name': 'Абонент',
                'verbose_name_plural': 'Абоненты',
                'db_table': 'abonents',
            },
        ),
        migrations.CreateModel(
            name='BalanceGroups',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Балансная Группа',
                'verbose_name_plural': 'Балансные Группы',
                'db_table': 'balance_groups',
            },
        ),
        migrations.CreateModel(
            name='ComportSettings',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=3)),
                ('baudrate', models.IntegerField()),
                ('data_bits', models.DecimalField(decimal_places=0, max_digits=3)),
                ('parity', models.DecimalField(decimal_places=0, max_digits=3)),
                ('stop_bits', models.DecimalField(decimal_places=0, max_digits=3)),
                ('write_timeout', models.SmallIntegerField()),
                ('read_timeout', models.SmallIntegerField()),
                ('attempts', models.DecimalField(decimal_places=0, max_digits=3)),
                ('delay_between_sending', models.IntegerField()),
                ('gsm_on', models.BooleanField(default=False, verbose_name='Использовать CSD канал?')),
                ('gsm_phone_number', models.CharField(max_length=15)),
                ('gsm_init_string', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Com порт',
                'verbose_name_plural': 'Com порты',
                'db_table': 'comport_settings',
            },
        ),
        migrations.CreateModel(
            name='Groups80020',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('name_sender', models.CharField(max_length=250)),
                ('inn_sender', models.CharField(max_length=250)),
                ('name_postavshik', models.CharField(max_length=250)),
                ('inn_postavshik', models.CharField(max_length=250)),
                ('dogovor_number', models.CharField(default=10, max_length=50)),
            ],
            options={
                'verbose_name': 'Группа отчётов 80020',
                'verbose_name_plural': 'Группы отчётов 80020',
                'db_table': 'groups_80020',
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('comments', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'verbose_name': 'Единица измерения',
                'verbose_name_plural': 'Единицы измерения',
                'db_table': 'measurement',
            },
        ),
        migrations.CreateModel(
            name='Meters',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Имя')),
                ('address', models.IntegerField(verbose_name='Сетевой адрес')),
                ('password', models.CharField(blank=True, max_length=100, verbose_name='Пароль')),
                ('attr1', models.CharField(blank=True, max_length=20, verbose_name='Атрибут 1')),
                ('attr2', models.CharField(blank=True, max_length=20, verbose_name='Атрибут 2')),
                ('attr3', models.CharField(blank=True, max_length=20, verbose_name='Атрибут 3')),
                ('attr4', models.CharField(blank=True, max_length=20, verbose_name='Атрибут 4')),
                ('password_type_hex', models.BooleanField(default=True, verbose_name='Использовать HEX для пароля?')),
                ('factory_number_manual', models.CharField(max_length=16, verbose_name='Заводской номер(вручную)')),
                ('factory_number_readed', models.CharField(blank=True, max_length=16, null=True, verbose_name='Заводской номер(из прибора)')),
                ('is_factory_numbers_equal', models.NullBooleanField(verbose_name='Совпадение номеров')),
                ('dt_install', models.DateTimeField(blank=True, null=True, verbose_name='Дата установки')),
                ('dt_last_read', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего удачного чтения данных')),
                ('time_delay_current', models.IntegerField(default=10)),
                ('guid_meters', models.ForeignKey(blank=True, db_column='guid_meters', null=True, on_delete=django.db.models.deletion.CASCADE, to='general.Meters')),
            ],
            options={
                'verbose_name': 'Счётчик',
                'verbose_name_plural': 'Счётчики',
                'db_table': 'meters',
            },
        ),
        migrations.CreateModel(
            name='NamesParams',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('guid_measurement', models.ForeignKey(db_column='guid_measurement', on_delete=django.db.models.deletion.CASCADE, to='general.Measurement')),
            ],
            options={
                'verbose_name': 'Наименование параметра',
                'verbose_name_plural': 'Наименования параметров',
                'db_table': 'names_params',
            },
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('param_address', models.IntegerField()),
                ('channel', models.IntegerField(default=0)),
                ('guid_names_params', models.ForeignKey(db_column='guid_names_params', on_delete=django.db.models.deletion.CASCADE, to='general.NamesParams')),
            ],
            options={
                'verbose_name': 'Параметр',
                'verbose_name_plural': 'Параметры',
                'db_table': 'params',
            },
        ),
        migrations.CreateModel(
            name='ProductCoefficientsKilns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sfid', models.IntegerField()),
                ('coefficient', models.FloatField()),
            ],
            options={
                'verbose_name': 'Удельный коэффициент продукта',
                'verbose_name_plural': 'Удельные коэффициенты продуктов',
                'db_table': 'product_coefficients_kilns',
            },
        ),
        migrations.CreateModel(
            name='ProductInfoKilns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt', models.DateField()),
                ('kiln_code', models.IntegerField()),
                ('product_caption', models.CharField(max_length=50)),
                ('product_count', models.IntegerField()),
                ('product_coefficient', models.FloatField()),
                ('product_weight', models.FloatField()),
            ],
            options={
                'verbose_name': 'Информация по продукции',
                'db_table': 'product_info_kilns',
            },
        ),
        migrations.CreateModel(
            name='ProductTypeKilns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nm', models.CharField(max_length=80)),
                ('kind_id', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Типы продукции',
                'db_table': 'product_type_kilns',
            },
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('type', models.DecimalField(decimal_places=0, max_digits=3, unique=True)),
            ],
            options={
                'verbose_name': 'Ресурс',
                'verbose_name_plural': 'Ресурсы',
                'db_table': 'resources',
            },
        ),
        migrations.CreateModel(
            name='TakenParams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('guid', models.UUIDField(default=uuid.uuid4, unique = True, serialize=False)),
                ('guid_meters', models.ForeignKey(db_column='guid_meters', on_delete=django.db.models.deletion.CASCADE, to='general.Meters')),
                ('guid_params', models.ForeignKey(db_column='guid_params', on_delete=django.db.models.deletion.CASCADE, to='general.Params')),
            ],
            options={
                'verbose_name': 'Считываемый параметр',
                'verbose_name_plural': 'Считываемые параметры',
                'db_table': 'taken_params',
            },
        ),
        migrations.CreateModel(
            name='TcpipSettings',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ip_address', models.CharField(max_length=15)),
                ('ip_port', models.IntegerField()),
                ('write_timeout', models.SmallIntegerField()),
                ('read_timeout', models.SmallIntegerField()),
                ('attempts', models.DecimalField(decimal_places=0, max_digits=3)),
                ('delay_between_sending', models.IntegerField()),
            ],
            options={
                'verbose_name': 'TCP/IP порт',
                'verbose_name_plural': 'TCP/IP порты',
                'db_table': 'tcpip_settings',
            },
        ),
        migrations.CreateModel(
            name='TypesAbonents',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Тип абонента',
                'verbose_name_plural': 'Типы абонентов',
                'db_table': 'types_abonents',
            },
        ),
        migrations.CreateModel(
            name='TypesMeters',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('driver_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Тип счётчик',
                'verbose_name_plural': 'Типы счётчиков',
                'db_table': 'types_meters',
            },
        ),
        migrations.CreateModel(
            name='TypesParams',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('period', models.IntegerField(blank=True, default=0, null=True)),
                ('type', models.DecimalField(decimal_places=0, max_digits=3, unique=True)),
            ],
            options={
                'verbose_name': 'Тип считываемого параметра',
                'verbose_name_plural': 'Типы считываемых параметров',
                'db_table': 'types_params',
            },
        ),
        migrations.CreateModel(
            name='VariousValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('value', models.FloatField()),
                ('status', models.BooleanField(default=False)),
                ('id_taken_params', models.ForeignKey(db_column='id_taken_params', on_delete=django.db.models.deletion.CASCADE, to='general.TakenParams')),
            ],
            options={
                'verbose_name': 'Настраиваемое значение',
                'verbose_name_plural': 'Настраиваемые значения',
                'db_table': 'various_values',
            },
        ),
        migrations.AddField(
            model_name='params',
            name='guid_types_meters',
            field=models.ForeignKey(db_column='guid_types_meters', on_delete=django.db.models.deletion.CASCADE, to='general.TypesMeters'),
        ),
        migrations.AddField(
            model_name='params',
            name='guid_types_params',
            field=models.ForeignKey(db_column='guid_types_params', on_delete=django.db.models.deletion.CASCADE, to='general.TypesParams'),
        ),
        migrations.CreateModel(
            name='Objects',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('level', models.SmallIntegerField()),
                ('guid_parent', models.ForeignKey(blank=True, db_column='guid_parent', null=True, on_delete=django.db.models.deletion.CASCADE, to='general.Objects')),
            ],
            options={
                'verbose_name': 'Объект',
                'verbose_name_plural': 'Объекты',
                'db_table': 'objects',
            },
        ),
        migrations.AddField(
            model_name='namesparams',
            name='guid_resources',
            field=models.ForeignKey(db_column='guid_resources', on_delete=django.db.models.deletion.CASCADE, to='general.Resources'),
        ),
        migrations.CreateModel(
            name='MonthlyValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('value', models.FloatField()),
                ('status', models.BooleanField(default=False)),
                ('id_taken_params', models.ForeignKey(db_column='id_taken_params', on_delete=django.db.models.deletion.CASCADE, to='general.TakenParams')),
            ],
            options={
                'verbose_name': 'Месячное значение',
                'verbose_name_plural': 'Месячные значения',
                'db_table': 'monthly_values',
            },
        ),
        migrations.AddField(
            model_name='meters',
            name='guid_types_meters',
            field=models.ForeignKey(db_column='guid_types_meters', on_delete=django.db.models.deletion.CASCADE, to='general.TypesMeters'),
        ),
        migrations.CreateModel(
            name='LinkMetersTcpipSettings',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('guid_meters', models.ForeignKey(db_column='guid_meters', on_delete=django.db.models.deletion.CASCADE, to='general.Meters')),
                ('guid_tcpip_settings', models.ForeignKey(db_column='guid_tcpip_settings', on_delete=django.db.models.deletion.CASCADE, to='general.TcpipSettings')),
            ],
            options={
                'verbose_name': 'Привязка счётчика к tcp/ip порту',
                'verbose_name_plural': 'Привязки счётчиков к tcp/ip портам',
                'db_table': 'link_meters_tcpip_settings',
            },
        ),
        migrations.CreateModel(
            name='LinkMetersComportSettings',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('guid_comport_settings', models.ForeignKey(db_column='guid_comport_settings', on_delete=django.db.models.deletion.CASCADE, to='general.ComportSettings')),
                ('guid_meters', models.ForeignKey(db_column='guid_meters', on_delete=django.db.models.deletion.CASCADE, to='general.Meters')),
            ],
            options={
                'verbose_name': 'Привязка счётчика к com порту',
                'verbose_name_plural': 'Привязки счётчиков к com портам',
                'db_table': 'link_meters_comport_settings',
            },
        ),
        migrations.CreateModel(
            name='LinkGroups80020Meters',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('measuringpoint_code', models.DecimalField(decimal_places=0, max_digits=18)),
                ('measuringpoint_name', models.CharField(max_length=250)),
                ('guid_groups_80020', models.ForeignKey(db_column='guid_groups_80020', on_delete=django.db.models.deletion.CASCADE, to='general.Groups80020')),
                ('guid_meters', models.ForeignKey(db_column='guid_meters', on_delete=django.db.models.deletion.CASCADE, to='general.Meters')),
            ],
            options={
                'verbose_name': 'Связь счётчика и Групп 80020',
                'verbose_name_plural': 'Связи счётчиков и Групп 80020',
                'db_table': 'link_groups_80020_meters',
            },
        ),
        migrations.CreateModel(
            name='LinkBalanceGroupsMeters',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.BooleanField(default=True, verbose_name="Знак входа в группу '+' ?")),
                ('guid_balance_groups', models.ForeignKey(db_column='guid_balance_groups', on_delete=django.db.models.deletion.CASCADE, to='general.BalanceGroups')),
                ('guid_meters', models.ForeignKey(db_column='guid_meters', on_delete=django.db.models.deletion.CASCADE, to='general.Meters')),
            ],
            options={
                'verbose_name': 'Привязка Групп к счётчику',
                'verbose_name_plural': 'Привязка Групп к счетчикам',
                'db_table': 'link_balance_groups_meters',
            },
        ),
        migrations.CreateModel(
            name='LinkAbonentsTakenParams',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('coefficient', models.FloatField(default=1)),
                ('coefficient_2', models.FloatField(default=1)),
                ('coefficient_3', models.FloatField(default=1000)),
                ('guid_abonents', models.ForeignKey(db_column='guid_abonents', on_delete=django.db.models.deletion.CASCADE, to='general.Abonents')),
                ('guid_taken_params', models.ForeignKey(db_column='guid_taken_params', on_delete=django.db.models.deletion.CASCADE, to='general.TakenParams', to_field='guid')),
            ],
            options={
                'verbose_name': 'Привязка абонента к параметру',
                'verbose_name_plural': 'Привязки абонентов к параметрам',
                'db_table': 'link_abonents_taken_params',
            },
        ),
        migrations.CreateModel(
            name='LinkAbonentsAuthUser',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('guid_abonents', models.ForeignKey(db_column='guid_abonents', on_delete=django.db.models.deletion.CASCADE, to='general.Abonents')),
                ('guid_auth_user', models.ForeignKey(db_column='id_auth_user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Привязка абонента к пользователю',
                'verbose_name_plural': 'Привязки абонентов к пользователям',
                'db_table': 'link_abonents_auth_user',
            },
        ),
        migrations.CreateModel(
            name='DailyValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('value', models.FloatField()),
                ('status', models.BooleanField(default=False)),
                ('id_taken_params', models.ForeignKey(db_column='id_taken_params', on_delete=django.db.models.deletion.CASCADE, to='general.TakenParams')),
            ],
            options={
                'verbose_name': 'Суточное значение',
                'verbose_name_plural': 'Суточные значения',
                'db_table': 'daily_values',
            },
        ),
        migrations.CreateModel(
            name='CurrentValuesArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('value', models.FloatField()),
                ('status', models.BooleanField(default=False)),
                ('id_taken_params', models.ForeignKey(db_column='id_taken_params', on_delete=django.db.models.deletion.CASCADE, to='general.TakenParams')),
            ],
            options={
                'verbose_name': 'Архивное текущее значение',
                'verbose_name_plural': 'Архив текущих значений',
                'db_table': 'current_values_archive',
            },
        ),
        migrations.CreateModel(
            name='CurrentValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('value', models.FloatField()),
                ('status', models.BooleanField(default=False)),
                ('id_taken_params', models.ForeignKey(db_column='id_taken_params', on_delete=django.db.models.deletion.CASCADE, to='general.TakenParams')),
            ],
            options={
                'verbose_name': 'Текущее значение',
                'verbose_name_plural': 'Текущие значения',
                'db_table': 'current_values',
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('guid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, verbose_name='Имя')),
                ('comment', models.TextField(verbose_name='Комментарий')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата комментария')),
                ('guid_abonents', models.ForeignKey(db_column='guid_abonents', on_delete=django.db.models.deletion.CASCADE, to='general.Abonents')),
            ],
            options={
                'verbose_name': 'Комментарии',
                'verbose_name_plural': 'Комментарии',
                'db_table': 'comments',
            },
        ),
        migrations.AddField(
            model_name='abonents',
            name='guid_objects',
            field=models.ForeignKey(db_column='guid_objects', on_delete=django.db.models.deletion.CASCADE, to='general.Objects'),
        ),
        migrations.AddField(
            model_name='abonents',
            name='guid_types_abonents',
            field=models.ForeignKey(db_column='guid_types_abonents', on_delete=django.db.models.deletion.CASCADE, to='general.TypesAbonents'),
        ),
    ]
